jobs:
  - job: windows
    pool:
      vmImage: windows-2022
    timeoutInMinutes: 360
    variables:
      NVIDIA_CUDA_DIR: $(Pipeline.Workspace)/.nvcuda
      NVIDIA_DRIVER_DIR: $(Pipeline.Workspace)/.nvdriver
      CUDA_10.0_URL:
      CUDA_10.1_URL:
      CUDA_10.2_URL:
    strategy:
      maxParallel: 8
      matrix:
        windows_python3.8:
          CONFIG: python3.8
          EXCLUDE_JINJA: CUDA_STR
        windows_python3.9:
          CONFIG: python3.9
          EXCLUDE_JINJA: CUDA_STR

        windows_python3.8_cuda10.2:
          CONFIG: python3.8_cuda10.2
          INCLUDE_JINJA: CUDA_STR
          CUDA_VER: 10.2
          CUDA_URL: http://developer.download.nvidia.com/compute/cuda/10.2/Prod/network_installers/cuda_10.2.89_win10_network.exe
        windows_python3.8_cuda11.0:
          CONFIG: python3.8_cuda11.0
          INCLUDE_JINJA: CUDA_STR
          CUDA_VER: 11.0
          CUDA_URL: http://developer.download.nvidia.com/compute/cuda/11.0.3/network_installers/cuda_11.0.3_win10_network.exe

        windows_python3.9_cuda10.2:
          CONFIG: python3.9_cuda10.2
          INCLUDE_JINJA: CUDA_STR
          CUDA_VER: 10.2
          CUDA_URL: http://developer.download.nvidia.com/compute/cuda/10.2/Prod/network_installers/cuda_10.2.89_win10_network.exe
        windows_python3.9_cuda11.0:
          CONFIG: python3.9_cuda11.0
          INCLUDE_JINJA: CUDA_STR
          CUDA_VER: 11.0
          CUDA_URL: http://developer.download.nvidia.com/compute/cuda/11.0.3/network_installers/cuda_11.0.3_win10_network.exe

    steps:
      - script: |
          echo "##vso[task.setvariable variable=NIGHTLY]true"
        condition: eq(variables['Build.Reason'], 'Schedule')
        displayName: Set dev trigger if scheduled

      - script: |
          echo "##vso[task.setvariable variable=UNSCHEDULED_MASTER]true"
        condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
        displayName: Set upload if running from unscheduled master

      - script: |
          ECHO ON
        #        conda create -c conda-forge --yes -n cb python=3 conda-build
        displayName: "Echo UP!"

      # Several mixed messages here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/conda-environment?view=azure-devops
      # This is supposedly deprecated, but this is still required for Microsoft-hosted agents to use the conda env
      - task: CondaEnvironment@1
        inputs:
          packageSpecs: "python=3.7 'conda-build>=3.19.2,<=3.20.4' conda anaconda-client"
          installOptions: "-c conda-forge"
          updateConda: false
        displayName: Install conda-build and activate environment

      # For some reason, every `conda` command exits the interpreter, so I had to split them up
      - script: |
          call C:\Miniconda\Scripts\activate
          conda config --add channels omnia
        displayName: Add Omnia to the conda channels

      - script: |
          call C:\Miniconda\Scripts\activate
          conda config --add channels conda-forge
        displayName: Add Conda-forge to the conda channels

      # The condition here for the NVIDIA steps only should trigger if CUDA_VER is set
      # - task: Cache@2
      #   inputs:
      #     key: 'CUDA | "$(CUDA_VER)" | Network'
      #     path: $(NVIDIA_CUDA_DIR)/$(CUDA_VER)
      #     cacheHitVar: CUDA_RESTORED
      #   displayName: Cache the NVIDIA CUDA installer
      #   condition: ne(variables['CUDA_VER'], '') # Technically Null, but is cast as "To string: '' (the empty string)"

      - task: PowerShell@2
        inputs:
          targetType: "inline"
          script: |
            New-Item -ItemType Directory -Force -Path $(NVIDIA_CUDA_DIR)/$(CUDA_VER)
            Invoke-WebRequest $(CUDA_URL) -OutFile $(NVIDIA_CUDA_DIR)/$(CUDA_VER)/CUDA_installer.exe
        displayName: Download CUDA Driver
        # condition: and(ne(variables['CUDA_VER'], ''), ne(variables.CUDA_RESTORED, 'true'))
        condition: ne(variables['CUDA_VER'], '')

      - script: |
          $(NVIDIA_CUDA_DIR)/$(CUDA_VER)/CUDA_installer.exe -s
        displayName: Install the CUDA Files
        condition: ne(variables['CUDA_VER'], '') # Technically Null, but is cast as "To string: '' (the empty string)"

        # Readd this above if needed
        # echo "##vso[task.prependpath]C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$(CUDA_VER)\bin"
      # Assembling in Bash because it makes more sense then powershell
      - bash: |
          CBA_FLAGS="-vvv"
          if [ -n "$INCLUDE_JINJA" ]; then
            CBA_FLAGS="$CBA_FLAGS --build-only-jinja $INCLUDE_JINJA"
          fi
          if [ -n "$EXCLUDE_JINJA" ]; then
            CBA_FLAGS="$CBA_FLAGS --no-build-jinja $EXCLUDE_JINJA"
          fi
          if [ ! -z "$NIGHTLY" ]; then
            CBA_FLAGS="$CBA_FLAGS --scheduled-only --upload omnia-dev --force"
          elif [ ! -z "$UNSCHEDULED_MASTER" ]; then
            CBA_FLAGS="$CBA_FLAGS --upload omnia-dev"
          fi
          echo "##vso[task.setvariable variable=CBA_FLAGS]$CBA_FLAGS"
        displayName: Assemble Variables

      - script: |
          call C:\Miniconda\Scripts\activate
          python $(Build.SourcesDirectory)/conda-build-all $(CBA_FLAGS) -m $(Build.SourcesDirectory)/.conda_configs/$(CONFIG).yaml $(Build.SourcesDirectory)/recipes/*/
        displayName: Run Conda Builds
        env:
          BINSTAR_TOKEN: $(BINSTAR_TOKEN)
